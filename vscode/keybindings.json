// Keybindings LINUX
[
  // # BASIC EDITING
  // ## CURSOR
  // Move cursor up                         ctrl+p
  {
    "key": "ctrl+p",
    "command": "cursorUp",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+p",
    "command": "list.focusUp",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+p",
    "command": "notifications.focusPreviousToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "ctrl+p",
    "command": "selectPrevSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+p",
    "command": "showPrevParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "ctrl+p",
    "command": "history.showPrevious",
    "when": "historyNavigationEnabled && historyNavigationWidget"
  },
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  // Move cursor down                       ctrl+n
  {
    "key": "ctrl+n",
    "command": "cursorDown",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+n",
    "command": "breadcrumbs.selectFocused",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "ctrl+n",
    "command": "history.showNext",
    "when": "historyNavigationEnabled && historyNavigationWidget"
  },
  {
    "key": "ctrl+n",
    "command": "keybindings.editor.focusKeybindings",
    "when": "inKeybindings && inKeybindingsSearch"
  },
  {
    "key": "ctrl+n",
    "command": "list.focusDown",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+n",
    "command": "notifications.focusNextToast",
    "when": "notificationFocus && notificationToastsVisible"
  },
  {
    "key": "ctrl+n",
    "command": "selectNextSuggestion",
    "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
  },
  {
    "key": "ctrl+n",
    "command": "settings.action.focusSettingsFile",
    "when": "inSettingsSearch && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+n",
    "command": "settings.action.focusSettingsFromSearch",
    "when": "inSettingsSearch && !suggestWidgetVisible"
  },
  {
    "key": "ctrl+n",
    "command": "showNextParameterHint",
    "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "ctrl+n",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  // Move cursor left                       ctrl+b
  {
    "key": "ctrl+b",
    "command": "cursorLeft",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+b",
    "command": "breadcrumbs.focusPrevious",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "ctrl+b",
    "command": "list.collapse",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+b",
    "command": "notification.collapse",
    "when": "notificationFocus"
  },
  // Move cursor right                      ctrl+f
  {
    "key": "ctrl+f",
    "command": "cursorRight",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+f",
    "command": "breadcrumbs.focusNext",
    "when": "breadcrumbsActive && breadcrumbsVisible"
  },
  {
    "key": "ctrl+f",
    "command": "list.expand",
    "when": "listFocus && !inputFocus"
  },
  {
    "key": "ctrl+f",
    "command": "notification.expand",
    "when": "notificationFocus"
  },
  // Move cursor page up                    ctrl+k
  {
    "key": "ctrl+u",
    "command": "cursorPageUp",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+u",
    "command": "selectPrevPageSuggestion",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  {
    "key": "ctrl+u",
    "command": "list.focusPageUp",
    "when": "listFocus && !inputFocus"
  },
  // Move cursor page down                  ctrl+j
  {
    "key": "ctrl+d",
    "command": "cursorPageDown",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+d",
    "command": "selectNextPageSuggestion",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  {
    "key": "ctrl+d",
    "command": "list.focusPageDown",
    "when": "listFocus && !inputFocus"
  },
  // Move cursor to start of word           ctrl+h
  {
    "key": "ctrl+h",
    "command": "cursorWordStartLeft",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+meta+h",
    "command": "cursorWordPartStartLeft",
    "when": "textInputFocus"
  },
  // Move cursor to end of word             ctrl+l
  {
    "key": "ctrl+l",
    "command": "cursorWordEndRight",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+meta+l",
    "command": "cursorWordPartRight",
    "when": "textInputFocus"
  },
  // Move cursor to start of line           ctrl+a
  {
    "key": "ctrl+a",
    "command": "cursorHome",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+left",
    "command": "cursorHome",
    "when": "editorTextFocus"
  },
  // Move cursor to end of line             ctrl+e
  {
    "key": "ctrl+e",
    "command": "cursorEnd",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+right",
    "command": "cursorEnd",
    "when": "editorTextFocus"
  },
  // Move cursor to top of file             alt+up
  {
    "key": "alt+up",
    "command": "cursorTop",
    "when": "editorTextFocus"
  },
  // Move cursor to bottom of file          alt+down
  {
    "key": "alt+down",
    "command": "cursorBottom",
    "when": "editorTextFocus"
  },
  // SCROLL
  // Scroll line up                         ctrl+k
  {
    "key": "ctrl+k",
    "command": "scrollLineUp",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+k",
    "command": "workbench.action.terminal.scrollUp",
    "when": "terminalFocus"
  },
  // Scroll line down                       ctrl+j
  {
    "key": "ctrl+j",
    "command": "scrollLineDown",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+j",
    "command": "workbench.action.terminal.scrollDown",
    "when": "terminalFocus"
  },
  // Scroll page up
  {
    "key": "ctrl+alt+k",
    "command": "scrollPageUp",
    "when": "editorTextFocus"
  },
  // Scroll page down
  {
    "key": "ctrl+alt+j",
    "command": "scrollPageDown",
    "when": "editorTextFocus"
  },
  // SELECT
  // Select up                              ctrl+shift+p
  {
    "key": "shift+up",
    "command": "cursorUpSelect",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+p",
    "command": "cursorUpSelect",
    "when": "editorTextFocus"
  },
  // Select down                            ctrl+shift+n
  {
    "key": "shift+down",
    "command": "cursorDownSelect",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+n",
    "command": "cursorDownSelect",
    "when": "editorTextFocus"
  },
  // Select previous character              ctrl+shift+b
  {
    "key": "shift+left",
    "command": "cursorLeftSelect",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+b",
    "command": "cursorLeftSelect",
    "when": "editorTextFocus"
  },
  // Select next character                  ctrl+shift+f
  {
    "key": "ctrl+shift+f",
    "command": "cursorRightSelect",
    "when": "editorTextFocus"
  },
  // Select page up                         ctrl+shift+k
  {
    "key": "ctrl+shift+u",
    "command": "cursorPageUpSelect",
    "when": "editorTextFocus"
  },
  // Select page down                       ctrl+shift+j
  {
    "key": "ctrl+shift+d",
    "command": "cursorPageDownSelect",
    "when": "editorTextFocus"
  },
  // Select to start of word                ctrl+shift+h
  {
    "key": "ctrl+shift+h",
    "command": "cursorWordStartLeftSelect",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+meta+h",
    "command": "cursorWordPartStartLeftSelect",
    "when": "textInputFocus"
  },
  // Select to end of word                  ctrl+shift+l
  {
    "key": "ctrl+shift+l",
    "command": "cursorWordEndRightSelect",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+meta+l",
    "command": "cursorWordPartRightSelect",
    "when": "textInputFocus"
  },
  // Select to start of line                ctrl+shift+a
  {
    "key": "shift+alt+left",
    "command": "cursorHomeSelect",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+a",
    "command": "cursorHomeSelect",
    "when": "editorTextFocus"
  },
  // Select to end of line                  ctrl+shift+e
  {
    "key": "shift+alt+right",
    "command": "cursorEndSelect",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+e",
    "command": "cursorEndSelect",
    "when": "editorTextFocus"
  },
  // Select to top of file                  shift+alt+up
  {
    "key": "shift+alt+up",
    "command": "cursorTopSelect",
    "when": "editorTextFocus"
  },
  // Select to bottom of file               shift+alt+down
  {
    "key": "shift+alt+down",
    "command": "cursorBottomSelect",
    "when": "editorTextFocus"
  },
  // Select all lines                       alt+a
  {
    "key": "alt+a",
    "command": "editor.action.selectAll"
  },
  {
    "key": "alt+a",
    "command": "workbench.action.terminal.selectAll",
    "when": "terminalFocus"
  },
  // Select line                            alt+i
  {
    "key": "alt+i",
    "command": "expandLineSelection",
    "when": "editorTextFocus"
  },
  // Select word                            alt+d
  {
    "key": "alt+d",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "editorFocus"
  },
  // Select all occurrences of word         shift+alt+D
  {
    "key": "shift+alt+D",
    "command": "editor.action.changeAll",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Select all occurrences of selection    shift+alt+l
  {
    "key": "shift+alt+l",
    "command": "editor.action.selectHighlights",
    "when": "editorFocus"
  },
  // ## DELETE
  // Delete line                            shift alt K
  {
    "key": "shift+alt+k",
    "command": "editor.action.deleteLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Delete to start of word                ctrl backspace
  {
    "key": "ctrl+backspace",
    "command": "deleteWordLeft",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+backspace",
    "command": "workbench.action.terminal.deleteWordLeft",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+meta+backspace",
    "command": "deleteWordPartLeft",
    "when": "textInputFocus && !editorReadonly"
  },
  // Delete to end of word                  ctrl delete
  {
    "key": "ctrl+delete",
    "command": "deleteWordRight",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+delete",
    "command": "workbench.action.terminal.deleteWordRight",
    "when": "terminalFocus"
  },
  {
    "key": "ctrl+meta+delete",
    "command": "deleteWordPartRight",
    "when": "textInputFocus && !editorReadonly"
  },
  // Delete to start of line                alt backspace
  {
    "key": "alt+backspace",
    "command": "deleteAllLeft",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Delete to end of line                  alt delete
  {
    "key": "alt+delete",
    "command": "deleteAllRight",
    "when": "editorTextFocus && !editorReadonly"
  },
  // ## Line editing
  // Insert line up                         shift alt enter
  {
    "key": "shift+alt+enter",
    "command": "editor.action.insertLineBefore",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Insert line down                       alt enter
  {
    "key": "alt+enter",
    "command": "editor.action.insertLineAfter",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+enter",
    "command": "lineBreakInsert",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Move line up                           ctrl alt P
  {
    "key": "ctrl+alt+p",
    "command": "editor.action.moveLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Move line down                         ctrl alt N
  {
    "key": "ctrl+alt+n",
    "command": "editor.action.moveLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Join lines                             alt J
  {
    "key": "alt+j",
    "command": "editor.action.joinLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  // ## COPY
  // Cut selection                          alt X
  {
    "key": "alt+x",
    "command": "editor.action.clipboardCutAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+x",
    "command": "editor.action.clipboardCopyAction",
    "when": "editorTextFocus && editorReadonly"
  },
  // Copy selection                         alt C
  {
    "key": "alt+c",
    "command": "editor.action.clipboardCopyAction",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+c",
    "command": "keybindings.editor.copyKeybindingEntry",
    "when": "inKeybindings && keybindingFocus"
  },
  {
    "key": "alt+c",
    "command": "workbench.action.terminal.copySelection",
    "when": "terminalFocus && terminalTextSelected"
  },
  {
    "key": "alt+c",
    "command": "problems.action.copy",
    "when": "problemFocus"
  },
  {
    "key": "alt+c",
    "command": "filesExplorer.copy",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  // Copy line up                           shift alt P
  {
    "key": "shift+alt+p",
    "command": "editor.action.copyLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Copy line down                         shift alt N
  {
    "key": "shift+alt+n",
    "command": "editor.action.copyLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Paste                                  alt V
  {
    "key": "alt+v",
    "command": "editor.action.clipboardPasteAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+v",
    "command": "editor.action.clipboardPasteAction",
    "when": "inQuickOpen"
  },
  {
    "key": "alt+v",
    "command": "filesExplorer.paste",
    "when": "explorerViewletVisible && filesExplorerFocus && !explorerResourceReadonly && !inputFocus"
  },
  // ## MULTIPLE CURSORS
  // Insert cursor up                       ctrl alt up
  {
    "key": "ctrl+alt+up",
    "command": "editor.action.insertCursorAbove",
    "when": "editorTextFocus"
  },
  // Insert cursor down                     ctrl alt down
  {
    "key": "ctrl+alt+down",
    "command": "editor.action.insertCursorBelow",
    "when": "editorTextFocus"
  },
  // Insert cursor end of lines selected    shift alt I
  {
    "key": "shift+alt+i",
    "command": "editor.action.insertCursorAtEndOfEachLineSelected",
    "when": "editorTextFocus"
  },
  // Column select up                       shift ctrl alt up
  {
    "key": "ctrl+shift+alt+up",
    "command": "cursorColumnSelectUp",
    "when": "editorTextFocus"
  },
  // Column select down                     shift ctrl alt down
  {
    "key": "ctrl+shift+alt+down",
    "command": "cursorColumnSelectDown",
    "when": "editorTextFocus"
  },
  // Column select left                     shift ctrl alt left
  {
    "key": "ctrl+shift+alt+left",
    "command": "cursorColumnSelectLeft",
    "when": "editorTextFocus"
  },
  // Column select right                    shift ctrl alt right
  {
    "key": "ctrl+shift+alt+right",
    "command": "cursorColumnSelectRight",
    "when": "editorTextFocus"
  },
  // ## INDENTATION
  // Indent line                            alt ]
  {
    "key": "alt+]",
    "command": "editor.action.indentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Outdent line                           alt [
  {
    "key": "alt+[",
    "command": "editor.action.outdentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Reindent lines                         alt L R
  {
    "key": "alt+l r",
    "command": "editor.action.reindentlines",
    "when": "editorTextFocus"
  },
  // ## FOLDING
  // Fold                                   alt L -
  {
    "key": "alt+l -",
    "command": "editor.fold",
    "when": "editorTextFocus"
  },
  // Fold all                               alt L alt -
  {
    "key": "alt+l alt+-",
    "command": "editor.foldAll",
    "when": "editorTextFocus"
  },
  // Fold all subregions                    alt L shift alt -
  {
    "key": "alt+l shift+alt+-",
    "command": "editor.foldRecursively",
    "when": "editorTextFocus"
  },
  // Unfold                                 alt L =
  {
    "key": "alt+l =",
    "command": "editor.unfold",
    "when": "editorTextFocus"
  },
  // Unfold all                             alt L alt =
  {
    "key": "alt+l alt+=",
    "command": "editor.unfoldAll",
    "when": "editorTextFocus"
  },
  // Unfold all subregions                  alt L shift alt =
  {
    "key": "alt+l shift+alt+=",
    "command": "editor.unfoldRecursively",
    "when": "editorTextFocus"
  },
  // Fold level #                           alt L #
  {
    "key": "alt+l 1",
    "command": "editor.foldLevel1",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+l 2",
    "command": "editor.foldLevel2",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+l 3",
    "command": "editor.foldLevel3",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+l 4",
    "command": "editor.foldLevel4",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+l 5",
    "command": "editor.foldLevel5",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+l 6",
    "command": "editor.foldLevel6",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+l 7",
    "command": "editor.foldLevel7",
    "when": "editorTextFocus"
  },
  // ## OTHERS
  // Comment line toggle                    alt /
  {
    "key": "alt+/",
    "command": "editor.action.commentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Comment block toggle                   ctrl shift /
  {
    "key": "ctrl+shift+/",
    "command": "editor.action.blockComment",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Undo                                   alt Z
  {
    "key": "alt+z",
    "command": "undo",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Redo                                   alt Y
  {
    "key": "alt+y",
    "command": "redo",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Uppercase                              alt K =
  {
    "key": "alt+k =",
    "command": "editor.action.transformToUppercase",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Lowercase                              alt K -
  {
    "key": "alt+k -",
    "command": "editor.action.transformToLowercase",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Sort lines ascending                   alt l a
  {
    "key": "alt+l a",
    "command": "editor.action.sortLinesAscending"
  },
  // Sort lines descending                  alt l d
  {
    "key": "alt+l d",
    "command": "editor.action.sortLinesDescending"
  },
  // # SEARCH
  // Find                                   alt F
  {
    "key": "alt+f",
    "command": "actions.find"
  },
  {
    "key": "alt+f",
    "command": "repl.action.filter",
    "when": "inDebugRepl && textInputFocus"
  },
  {
    "key": "alt+f",
    "command": "workbench.action.terminal.focusFindWidget",
    "when": "terminalFindWidgetFocused"
  },
  {
    "key": "alt+f",
    "command": "workbench.action.terminal.focusFindWidget",
    "when": "terminalFocus"
  },
  {
    "key": "alt+f",
    "command": "editor.action.extensioneditor.showfind",
    "when": "!editorFocus && activeEditor == 'workbench.editor.extension'"
  },
  {
    "key": "alt+f",
    "command": "editor.action.webvieweditor.showFind",
    "when": "!editorFocus && activeEditor == 'WebviewEditor'"
  },
  {
    "key": "alt+f",
    "command": "keybindings.editor.searchKeybindings",
    "when": "inKeybindings"
  },
  {
    "key": "alt+f",
    "command": "problems.action.focusFilter",
    "when": "problemsViewFocus"
  },
  {
    "key": "alt+f",
    "command": "settings.action.search",
    "when": "inSettingsEditor"
  },
  {
    "key": "alt+f",
    "command": "list.toggleKeyboardNavigation",
    "when": "filesExplorerFocus"
  },
  // Find in files                          shift alt F
  {
    "key": "shift+alt+f",
    "command": "workbench.action.findInFiles",
    "when": "!searchInputBoxFocus"
  },
  // Find next                              alt H
  {
    "key": "alt+h",
    "command": "editor.action.nextMatchFindAction",
    "when": "editorFocus"
  },
  // Find previous                          shift alt H
  {
    "key": "shift+alt+h",
    "command": "editor.action.previousMatchFindAction",
    "when": "editorFocus"
  },
  // Replace                                alt R
  {
    "key": "alt+r",
    "command": "editor.action.startFindReplaceAction",
    "when": "editorFocus"
  },
  // Replace in files                       shift alt R
  {
    "key": "shift+alt+r",
    "command": "workbench.action.replaceInFiles"
  },
  // Replace one                            ctrl R
  {
    "key": "ctrl+r",
    "command": "search.action.replace",
    "when": "matchFocus && replaceActive && searchViewletVisible"
  },
  // Replace all                            ctrl shift R
  {
    "key": "ctrl+shift+r",
    "command": "editor.action.replaceAll",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "key": "ctrl+shift+r",
    "command": "search.action.replaceAll",
    "when": "replaceActive && searchViewletVisible && !findWidgetVisible"
  },
  // Toggle Case Sensitive                     alt alt C
  {
    "key": "ctrl+alt+c",
    "command": "toggleFindCaseSensitive",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+alt+c",
    "command": "toggleSearchCaseSensitive",
    "when": "searchInputBoxFocus && searchViewletVisible"
  },
  // Toggle Whole Word                         alt alt W
  {
    "key": "ctrl+alt+w",
    "command": "toggleFindWholeWord",
    "when": "editorFocus"
  },
  {
    "key": "ctrl+alt+w",
    "command": "toggleSearchWholeWord",
    "when": "searchInputBoxFocus && searchViewletVisible"
  },
  // # NAVIGATION
  // Show all commands                      alt P
  {
    "key": "alt+p",
    "command": "workbench.action.showCommands"
  },
  // Go to file                             alt O
  {
    "key": "alt+o",
    "command": "workbench.action.quickOpen"
  },
  {
    "key": "alt+shift+o",
    "command": "workbench.action.showAllEditorsByMostRecentlyUsed"
  },
  // Go to line                             alt G G
  {
    "key": "alt+g g",
    "command": "workbench.action.gotoLine"
  },
  {
    "key": "alt+g alt+g",
    "command": "workbench.action.gotoLine"
  },
  // Go to symbol                           alt G F
  {
    "key": "alt+g f",
    "command": "workbench.action.gotoSymbol"
  },
  {
    "key": "alt+g alt+f",
    "command": "workbench.action.gotoSymbol"
  },
  // Go to symbol in workspace              alt G W
  {
    "key": "alt+g w",
    "command": "workbench.action.showAllSymbols"
  },
  {
    "key": "alt+g alt+w",
    "command": "workbench.action.showAllSymbols"
  },
  // Go to definition                       alt G D
  {
    "key": "alt+g d",
    "command": "editor.action.goToDeclaration",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  // Open definition to the side            alt G alt D
  {
    "key": "alt+g alt+d",
    "command": "editor.action.openDeclarationToTheSide",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  // Peek definition                        alt G P
  {
    "key": "alt+g p",
    "command": "editor.action.previewDeclaration",
    "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  // Show hover                             alt G H
  {
    "key": "alt+g h",
    "command": "editor.action.showHover",
    "when": "editorTextFocus"
  },
  {
    "key": "alt+g h",
    "command": "editor.debug.action.showDebugHover",
    "when": "editorTextFocus && inDebugMode"
  },
  // Go to matching bracket                 alt G B
  {
    "key": "shift+alt+\\",
    "command": "editor.action.jumpToBracket",
    "when": "editorTextFocus"
  },
  // Go back                                ctrl [
  {
    "key": "ctrl+[",
    "command": "workbench.action.navigateBack",
    "when": "editorTextFocus"
  },
  // Go forward                             ctrl ]
  {
    "key": "ctrl+]",
    "command": "workbench.action.navigateForward",
    "when": "editorTextFocus"
  },
  // # EDITOR
  // New file                               alt N
  {
    "key": "alt+n",
    "command": "workbench.action.files.newUntitledFile",
    "when": "!filesExplorerFocus"
  },
  // Save                                   alt S
  {
    "key": "alt+s",
    "command": "workbench.action.files.save"
  },
  // Save as                                alt shift S
  {
    "key": "shift+alt+s",
    "command": "workbench.action.files.saveAs"
  },
  // Save all                               alt E alt A
  {
    "key": "ctrl+shift+alt+s",
    "command": "workbench.action.files.saveAll"
  },
  // Close editor                           alt W
  {
    "key": "alt+w",
    "command": "workbench.action.closeActiveEditor"
  },
  // Close other editors                    ctrl shift alt w
  {
    "key": "ctrl+shift+alt+w",
    "command": "workbench.action.closeOtherEditors"
  },
  // Close window                           shift alt W
  {
    "key": "alt+w",
    "command": "workbench.action.closeWindow",
    "when": "!editorIsOpen"
  },
  // Close other groups                     alt E W
  {
    "key": "alt+e w",
    "command": "workbench.action.closeEditorsInOtherGroups"
  },
  {
    "key": "alt+e alt+w",
    "command": "workbench.action.closeEditorsInOtherGroups"
  },
  // Close all                              alt E alt W
  {
    "key": "shift+alt+w",
    "command": "workbench.action.closeAllEditors"
  },
  // Reopen closed editor                   alt E R | shift alt T
  {
    "key": "alt+e r",
    "command": "workbench.action.reopenClosedEditor"
  },
  {
    "key": "shift+alt+t",
    "command": "workbench.action.reopenClosedEditor"
  },
  // Previous editor                        shif alt [
  {
    "key": "shift+alt+[",
    "command": "workbench.action.previousEditorInGroup"
  },
  // Next editor                            shif alt ]
  {
    "key": "shift+alt+]",
    "command": "workbench.action.nextEditorInGroup"
  },
  // Focus # editor                         ctrl #
  {
    "key": "ctrl+1",
    "command": "workbench.action.openEditorAtIndex1"
  },
  {
    "key": "ctrl+2",
    "command": "workbench.action.openEditorAtIndex2"
  },
  {
    "key": "ctrl+3",
    "command": "workbench.action.openEditorAtIndex3"
  },
  {
    "key": "ctrl+4",
    "command": "workbench.action.openEditorAtIndex4"
  },
  {
    "key": "ctrl+5",
    "command": "workbench.action.openEditorAtIndex5"
  },
  {
    "key": "ctrl+6",
    "command": "workbench.action.openEditorAtIndex6"
  },
  {
    "key": "ctrl+7",
    "command": "workbench.action.openEditorAtIndex7"
  },
  {
    "key": "ctrl+8",
    "command": "workbench.action.openEditorAtIndex8"
  },
  {
    "key": "ctrl+9",
    "command": "workbench.action.openEditorAtIndex9"
  },
  // Move editor left                       ctrl alt [
  {
    "key": "ctrl+alt+[",
    "command": "workbench.action.moveEditorLeftInGroup"
  },
  // Move editor right                      ctrl alt ]
  {
    "key": "ctrl+alt+]",
    "command": "workbench.action.moveEditorRightInGroup"
  },
  // Move editor into above group            alt E up
  {
    "key": "alt+E up",
    "command": "workbench.action.moveEditorToAboveGroup"
  },
  // Move editor into below group            alt E down
  {
    "key": "alt+E down",
    "command": "workbench.action.moveEditorToBelowGroup"
  },
  // Move editor into left group            alt E left
  {
    "key": "alt+E left",
    "command": "workbench.action.moveEditorToLeftGroup"
  },
  // Move editor into right group            alt E right
  {
    "key": "alt+E right",
    "command": "workbench.action.moveEditorToRightGroup"
  },
  // Move editor into next group            alt E alt /
  {
    "key": "alt+E alt+/",
    "command": "workbench.action.moveEditorToNextGroup"
  },
  // Move editor group left                 alt E alt left
  {
    "key": "alt+e alt+left",
    "command": "workbench.action.moveActiveEditorGroupLeft"
  },
  //Move editor group right                alt E alt right
  {
    "key": "alt+e alt+right",
    "command": "workbench.action.moveActiveEditorGroupRight"
  },
  // Join editors groups                    alt E J | alt E alt J
  {
    "key": "alt+e j",
    "command": "workbench.action.joinTwoGroups"
  },
  {
    "key": "alt+e alt+j",
    "command": "workbench.action.joinTwoGroups"
  },
  // Cycle editor groups                    alt shift E | alt E alt E
  {
    "key": "alt+e alt+e",
    "command": "workbench.action.navigateEditorGroups",
    "when": "editorFocus"
  },
  {
    "key": "alt+e alt+e",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "!editorFocus"
  },
  // Focus # editor group                   alt #
  {
    "key": "alt+0",
    "command": "workbench.action.focusSideBar"
  },
  {
    "key": "alt+1",
    "command": "workbench.action.focusFirstEditorGroup"
  },
  {
    "key": "alt+2",
    "command": "workbench.action.focusSecondEditorGroup"
  },
  {
    "key": "alt+3",
    "command": "workbench.action.focusThirdEditorGroup"
  },
  {
    "key": "alt+4",
    "command": "workbench.action.focusFourthEditorGroup"
  },
  {
    "key": "alt+5",
    "command": "workbench.action.focusFifthEditorGroup"
  },
  {
    "key": "alt+6",
    "command": "workbench.action.focusSixthEditorGroup"
  },
  {
    "key": "alt+7",
    "command": "workbench.action.focusSeventhEditorGroup"
  },
  {
    "key": "alt+8",
    "command": "workbench.action.focusEighthEditorGroup"
  },
  // Split editor                           alt E /
  {
    "key": "alt+e /",
    "command": "workbench.action.splitEditor"
  },
  // Toggle editor group horizontal         alt E H
  {
    "key": "alt+e h",
    "command": "workbench.action.toggleEditorGroupLayout"
  },
  // Maximize editor group                  alt E = | alt E alt =
  {
    "key": "alt+e =",
    "command": "workbench.action.maximizeEditor"
  },
  // Even editor groups                     alt E alt =
  {
    "key": "alt+e -",
    "command": "workbench.action.evenEditorWidths"
  },
  // Open next                              ctrl tab
  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.openNextRecentlyUsedEditor"
  },
  {
    "key": "ctrl+tab",
    "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
    "when": "inEditorsPicker && inQuickOpen"
  },
  // Open previous                          shift ctrl tab
  {
    "key": "ctrl+tab",
    "command": "workbench.action.openPreviousRecentlyUsedEditor"
  },
  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
    "when": "inEditorsPicker && inQuickOpen"
  },
  // # DISPLAY
  // Sidebar toggle                         alt M /
  {
    "key": "alt+m /",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  // Sidebar focus                          alt M alt+/
  {
    "key": "alt+m alt+/",
    "command": "workbench.action.focusSideBar"
  },
  {
    "key": "alt+m alt+/",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "!editorFocus"
  },
  // Focus on open editors                  alt M E
  {
    "key": "alt+m e",
    "command": "workbench.files.action.focusOpenEditorsView"
  },
  // Focus on files Explorer                alt M F
  {
    "key": "alt+m f",
    "command": "workbench.files.action.focusFilesExplorer"
  },
  // Show search                            alt M S
  {
    "key": "alt+m s",
    "command": "search.action.focusActiveEditor",
    "when": "searchInputBoxFocus && searchViewletVisible"
  },
  {
    "key": "alt+m s",
    "command": "workbench.action.findInFiles",
    "when": "!searchInputBoxFocus"
  },
  {
    "key": "alt+m s",
    "command": "workbench.view.search",
    "when": "!searchViewletVisible"
  },
  // Show search and replace                alt M R
  {
    "key": "alt+m r",
    "command": "workbench.action.replaceInFiles"
  },
  {
    "key": "alt+m r",
    "command": "search.action.focusActiveEditor",
    "when": "replaceInputBoxFocus && searchViewletVisible"
  },
  // Show source control                    alt M G
  {
    "key": "alt+m g",
    "command": "workbench.view.scm"
  },
  // Show debug                             alt M B
  {
    "key": "alt+m b",
    "command": "workbench.view.debug"
  },
  // Show extensions                        alt M X
  {
    "key": "alt+m x",
    "command": "workbench.view.extensions"
  },
  // Panel toggle                           alt M -
  {
    "key": "alt+m -",
    "command": "workbench.action.togglePanel"
  },
  // Panel maximize                         alt M =
  {
    "key": "alt+m =",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  // Show problems                          alt M P
  {
    "key": "alt+m p",
    "command": "workbench.actions.view.problems"
  },
  // Show output                            alt M O
  {
    "key": "alt+m o",
    "command": "workbench.action.output.toggleOutput"
  },
  // Show debug console                     alt M alt B
  {
    "key": "alt+m c",
    "command": "workbench.debug.action.toggleRepl"
  },
  // Toggle integrated terminal             alt M T
  {
    "key": "alt+m t",
    "command": "workbench.action.terminal.toggleTerminal"
  },
  // Focus integrated terminal              alt M alt T
  {
    "key": "alt+m alt+t",
    "command": "workbench.action.terminal.focus"
  },
  {
    "key": "alt+m alt+t",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "terminalFocus"
  },
  // Toggle zen mode                        alt M Z
  {
    "key": "alt+m z",
    "command": "workbench.action.toggleZenMode"
  },
  // Toggle full screen                     alt M alt F
  {
    "key": "alt+m alt+f",
    "command": "workbench.action.toggleFullScreen"
  },
  // Markdown preview                       alt M M
  {
    "key": "alt+m m",
    "command": "markdown.showPreview",
    "when": "editorLangId == 'markdown'"
  },
  // Markdown preview to side               alt M alt M
  {
    "key": "alt+m alt+m",
    "command": "markdown.showPreviewToSide",
    "when": "editorLangId == 'markdown'"
  },
  // Zoom in                                alt =
  {
    "key": "alt+=",
    "command": "workbench.action.zoomIn"
  },
  // Zoom out                               alt -
  {
    "key": "alt+-",
    "command": "workbench.action.zoomOut"
  },
  // Reset zoom                             shift alt = | shift alt -
  {
    "key": "shift+alt+=",
    "command": "workbench.action.zoomReset"
  },
  {
    "key": "shift+alt+-",
    "command": "workbench.action.zoomReset"
  },
  // # PREFERENCES
  // Open preferences                       alt ,
  {
    "key": "alt+,",
    "command": "workbench.action.openGlobalSettings"
  },
  // Keyboard shortcuts                     alt K alt S
  {
    "key": "alt+k alt+s",
    "command": "workbench.action.openGlobalKeybindings"
  },
  {
    "key": "alt+k alt+k",
    "command": "keybindings.editor.defineKeybinding",
    "when": "inKeybindings && keybindingFocus"
  },
  {
    "key": "alt+k alt+k",
    "command": "editor.action.defineKeybinding",
    "when": "editorTextFocus && !editorReadonly && editorLangId == 'json'"
  },
  // User snippets                          alt K alt U
  {
    "key": "alt+k alt+u",
    "command": "workbench.action.openSnippets"
  },
  // Insert snippet                         alt K U
  {
    "key": "alt+k u",
    "command": "editor.action.insertSnippet",
    "when": "editorTextFocus"
  },
  // Color theme                            alt K alt T
  {
    "key": "alt+k alt+t",
    "command": "workbench.action.selectTheme"
  },
  // Change language                        alt K alt L
  {
    "key": "alt+k l",
    "command": "workbench.action.editor.changeLanguageMode"
  },
  {
    "key": "alt+k alt+l",
    "command": "workbench.action.editor.changeLanguageMode"
  },
  // Format selection                       alt K F
  {
    "key": "alt+k f",
    "command": "editor.action.formatSelection",
    "when": "editorHasDocumentSelectionFormattingProvider && editorHasSelection && editorTextFocus && !editorReadonly"
  },
  // Format document                        alt K alt F
  {
    "key": "alt+k alt+f",
    "command": "editor.action.formatDocument",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly"
  },
  // Word wrap toggle                       alt K W
  {
    "key": "alt+k w",
    "command": "editor.action.toggleWordWrap",
    "when": "editorTextFocus"
  },
  // Copy path of active file               alt K P
  {
    "key": "alt+k p",
    "command": "copyFilePath"
  },
  // Copy path of active file               alt K P
  {
    "key": "alt+k alt+p",
    "command": "copyRelativeFilePath"
  },
  // Toggle minimap                         alt K M
  {
    "key": "alt+k m",
    "command": "editor.action.toggleMinimap"
  },
  // TM Scopes                              ctrl alt I
  {
    "key": "ctrl+alt+i",
    "command": "editor.action.inspectTMScopes",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Developer tools                        ctrl shift alt I
  {
    "key": "ctrl+shift+alt+i",
    "command": "workbench.action.toggleDevTools"
  },
  // // # DEBUG
  // // Breakpoint toggle                      alt B alt B
  // {
  //   "key": "alt+b alt+b",
  //   "command": "editor.debug.action.toggleBreakpoint",
  //   "when": "editorTextFocus"
  // },
  // // Start                                  alt B S
  // {
  //   "key": "alt+b s",
  //   "command": "workbench.action.debug.start",
  //   "when": "!inDebugMode"
  // },
  // // Start (without debugging)              alt B alt S
  // {
  //   "key": "alt+b alt+s",
  //   "command": "workbench.action.debug.run",
  //   "when": "!inDebugMode"
  // },
  // // Restart                                alt B R
  // {
  //   "key": "alt+b r",
  //   "command": "workbench.action.debug.restart",
  //   "when": "inDebugMode"
  // },
  // // Continue                               alt B alt right
  // {
  //   "key": "alt+b alt+right",
  //   "command": "workbench.action.debug.continue",
  //   "when": "inDebugMode"
  // },
  // // Pause                                  alt B P
  // {
  //   "key": "alt+b p",
  //   "command": "workbench.action.debug.pause",
  //   "when": "inDebugMode"
  // },
  // // Step into                              alt B down
  // {
  //   "key": "alt+b down",
  //   "command": "workbench.action.debug.stepInto",
  //   "when": "inDebugMode"
  // },
  // // Step out                               alt B up
  // {
  //   "key": "alt+b up",
  //   "command": "workbench.action.debug.stepOut",
  //   "when": "inDebugMode"
  // },
  // // Step over                              alt B right
  // {
  //   "key": "alt+b right",
  //   "command": "workbench.action.debug.stepOver",
  //   "when": "inDebugMode"
  // },
  // // Stop                                   alt B T
  // {
  //   "key": "alt+b t",
  //   "command": "workbench.action.debug.stop",
  //   "when": "inDebugMode"
  // },
  // // Show hover                             alt B Hs
  // {
  //   "key": "alt+b h",
  //   "command": "editor.debug.action.showDebugHover",
  //   "when": "editorTextFocus && inDebugMode"
  // },
  // {
  //   "key": "alt+b [",
  //   "command": "workbench.debug.viewlet.action.disableAllBreakpoints"
  // },
  // {
  //   "key": "alt+b alt+[",
  //   "command": "workbench.debug.viewlet.action.disableAllBreakpoints"
  // },
  // {
  //   "key": "alt+b ]",
  //   "command": "workbench.debug.viewlet.action.enableAllBreakpoints"
  // },
  // {
  //   "key": "alt+b alt+]",
  //   "command": "workbench.debug.viewlet.action.enableAllBreakpoints"
  // },
  // {
  //   "key": "alt+b backspace",
  //   "command": "workbench.debug.viewlet.action.removeAllBreakpoints"
  // },
  // {
  //   "key": "alt+b alt+backspace",
  //   "command": "workbench.debug.viewlet.action.reapplyBreakpointsAction"
  // },
  // # TASKS
  // Run task                               alt T alt T
  {
    "key": "alt+t alt+t",
    "command": "workbench.action.tasks.runTask"
  },
  // Run build task                         alt T B
  {
    "key": "alt+t b",
    "command": "workbench.action.tasks.build"
  },
  // Run test task                          alt T T
  {
    "key": "alt+t t",
    "command": "workbench.action.tasks.test"
  },
  // # EXPLORER
  // New file                               alt N
  {
    "key": "alt+n",
    "command": "explorer.newFile",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  // New folder                             shift alt N
  {
    "key": "shift+alt+n",
    "command": "explorer.newFolder",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  // Rename file                            alt R
  {
    "key": "alt+r",
    "command": "renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  // Open file                              alt L | enter
  {
    "key": "enter",
    "command": "list.select",
    "when": "listFocus"
  },
  {
    "key": "ctrl+l",
    "command": "list.select",
    "when": "listFocus"
  },
  // Open file to side                      ctrl shift l
  {
    "key": "alt+enter",
    "command": "explorer.openToSide",
    "when": "listFocus"
  },
  {
    "key": "ctrl+shift+l",
    "command": "explorer.openToSide",
    "when": "listFocus"
  },
  // Collapse                               ctrl+h
  {
    "key": "ctrl+h",
    "command": "list.collapse",
    "when": "listFocus"
  },
  // Collapse all                           ctrl+alt+h
  {
    "key": "ctrl+alt+h",
    "command": "workbench.files.action.collapseExplorerFolders"
  },
  // # TERMINAL
  // New terminal                           alt T N
  {
    "key": "alt+t n",
    "command": "workbench.action.terminal.new"
  },
  // Focus previous terminal                shift alt [
  {
    "key": "shift+alt+[",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus"
  },
  // Focus next terminal                    shift alt ]
  {
    "key": "shift+alt+]",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus"
  },
  // Kill terminal                          alt T W
  {
    "key": "alt+t w",
    "command": "workbench.action.terminal.kill",
    "when": "terminalFocus"
  },
  // Rename terminal                        alt T R
  {
    "key": "alt+r",
    "command": "workbench.action.terminal.rename",
    "when": "terminalFocus"
  },
  // Clear                                  alt K
  {
    "key": "alt+t k",
    "command": "workbench.action.terminal.clear",
    "when": "terminalFocus"
  },
  // # GIT
  // Open changes                           alt G C
  {
    "key": "alt+g c",
    "command": "git.openChange",
    "when": "editorTextFocus"
  },
  // Open file                              alt G O
  {
    "key": "alt+g o",
    "command": "git.openFile",
    "when": "editorTextFocus"
  },
  // Stage all                             alt+g alt+a
  {
    "key": "alt+g alt+a",
    "command": "git.stageAll"
  },
  // Stash                                  alt G S
  {
    "key": "alt+g s",
    "command": "git.stashIncludeUntracked"
  },
  // Pop stash                              alt G P
  {
    "key": "alt+g p",
    "command": "git.stashPop"
  },
  // Apply stash                              alt G alt+s
  {
    "key": "alt+g alt+s",
    "command": "gitlens.stashApply"
  },
  // Checkout to                            alt G alt C
  {
    "key": "alt+g alt+c",
    "command": "git.checkout"
  },
  // Discard changes                        alt G backspace
  {
    "key": "alt+g backspace",
    "command": "git.clean",
    "when": "editorTextFocus"
  },
  // Undo last commit                       alt G alt Z
  {
    "key": "alt+g alt+Z",
    "command": "git.undoCommit"
  },
  // Previous change                        ctrl shift alt [
  {
    "key": "ctrl+shift+alt+[",
    "command": "editor.action.dirtydiff.previous",
    "when": "editorTextFocus"
  },
  // Next change                            ctrl shift alt ]
  {
    "key": "ctrl+shift+alt+]",
    "command": "editor.action.dirtydiff.next",
    "when": "editorTextFocus"
  },
  // REMOVED CONFLICTS
  {
    "key": "enter",
    "command": "-renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  {
    "key": "alt+k u",
    "command": "-workbench.action.closeUnmodifiedEditors"
  },
  {
    "key": "alt+k f",
    "command": "-workbench.action.closeFolder"
  },
  {
    "key": "alt+k m",
    "command": "-workbench.action.editor.changeLanguageMode"
  },
  {
    "key": "alt+k alt+w",
    "command": "-workbench.action.closeAllEditors"
  },
  {
    "key": "alt+k w",
    "command": "-workbench.action.closeEditorsInGroup"
  },
  {
    "key": "alt+k o",
    "command": "-workbench.action.files.showOpenedFileInNewWindow"
  },
  {
    "key": "ctrl+alt+left",
    "command": "-workbench.action.moveEditorToPreviousGroup"
  },
  {
    "key": "ctrl+alt+right",
    "command": "-workbench.action.moveEditorToNextGroup"
  },
  {
    "key": "meta+z",
    "command": "-editor.action.toggleWordWrap"
  },
  {
    "key": "meta+c",
    "command": "-gitlens.showQuickCommitFileDetails",
    "when": "editorTextFocus && gitlens:enabled"
  },
  {
    "key": "ctrl+d",
    "command": "-deleteRight",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "escape escape",
    "command": "-workbench.action.exitZenMode",
    "when": "inZenMode"
  },
  {
    "key": "ctrl+h",
    "command": "-deleteLeft",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+j",
    "command": "-editor.action.joinLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+k",
    "command": "-deleteAllRight",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "alt+b",
    "command": "-workbench.action.toggleSidebarVisibility"
  },
  {
    "key": "alt+e",
    "command": "-actions.findWithSelection"
  },
  {
    "key": "ctrl+c",
    "command": "-editor.action.clipboardCopyAction",
    "when": "textInputFocus"
  },
  {
    "key": "ctrl+v",
    "command": "-editor.action.clipboardPasteAction",
    "when": "textInputFocus && !editorReadonly"
  },
  {
    "key": "alt+q",
    "command": "workbench.action.quit"
  },
  {
    "key": "ctrl+q",
    "command": "-workbench.action.quit"
  },
  {
    "key": "alt+m v",
    "command": "workbench.action.toggleMenuBar"
  },
  {
    "key": "ctrl+n",
    "command": "-workbench.action.files.newUntitledFile"
  },
  {
    "key": "ctrl+p",
    "command": "-workbench.action.quickOpenNavigateNextInFilePicker",
    "when": "inFilesPicker && inQuickOpen"
  },
  {
    "key": "alt+4",
    "command": "-workbench.action.openEditorAtIndex4"
  },
  {
    "key": "alt+4",
    "command": "-workbench.action.openEditorAtIndex4"
  },
  {
    "key": "shift+alt+o",
    "command": "-editor.action.organizeImports",
    "when": "editorTextFocus && !editorReadonly && supportedCodeAction =~ /(\\s|^)source\\.organizeImports\\b/"
  },
  {
    "key": "alt+]",
    "command": "toggleSearchEditorContextLines",
    "when": "inSearchEditor"
  },
  {
    "key": "f12",
    "command": "search.action.openInEditor",
    "when": "searchViewletVisible"
  },
  {
    "key": "alt+t d",
    "command": "todo.toggleDone",
    "when": "editorTextFocus && editorLangId == 'todo'"
  },
  {
    "key": "alt+t c",
    "command": "todo.toggleCancelled",
    "when": "editorTextFocus && editorLangId == 'todo'"
  },
  {
    "key": "alt+t s",
    "command": "todo.toggleStart",
    "when": "editorTextFocus && editorLangId == 'todo'"
  },
  {
    "key": "alt+t alt+enter",
    "command": "todo.toggleBox",
    "when": "editorTextFocus && editorLangId == 'todo'"
  },
  {
    "key": "alt+t enter",
    "command": "todo.toggleBox",
    "when": "editorTextFocus && editorLangId == 'todo'"
  },
  {
    "key": "alt+t a",
    "command": "todo.archive",
    "when": "editorTextFocus && editorLangId == 'todo'"
  },
  {
    "key": "alt+g t",
    "command": "todo.open"
  },
  {
    "key": "ctrl+j",
    "command": "-workbench.action.togglePanel"
  },
  {
    "key": "ctrl+alt+j",
    "command": "-liveshare.join",
    "when": "liveshare:state != 'Joined' && liveshare:state != 'Shared'"
  },
  {
    "key": "ctrl+alt+/",
    "command": "-liveshare.followToTheSide",
    "when": "liveshare:hasCollaborators"
  },
  {
    "key": "ctrl+alt+f",
    "command": "-liveshare.unfollow",
    "when": "liveshare:hasCollaborators && liveshare:isFollowing"
  },
  {
    "key": "ctrl+alt+j",
    "command": "-liveshare.join",
    "when": "liveshare:state != 'Joined' && liveshare:state != 'Shared'"
  },
  {
    "key": "ctrl+alt+f",
    "command": "-liveshare.follow",
    "when": "liveshare:hasCollaborators && !liveshare:isFollowing"
  },
  {
    "key": "alt+k enter",
    "command": "workbench.action.pinEditor",
    "when": "config.workbench.editor.showTabs && !editorSticky"
  },
  {
    "key": "ctrl+k shift+enter",
    "command": "-workbench.action.pinEditor",
    "when": "config.workbench.editor.showTabs && !editorSticky"
  },
  {
    "key": "alt+k enter",
    "command": "workbench.action.unpinEditor",
    "when": "config.workbench.editor.showTabs && editorSticky"
  },
  {
    "key": "ctrl+k shift+enter",
    "command": "-workbench.action.unpinEditor",
    "when": "config.workbench.editor.showTabs && editorSticky"
  },
  {
    "key": "alt+w",
    "command": "workbench.action.closeGroup",
    "when": "activeEditorGroupEmpty && multipleEditorGroups"
  },
  {
    "key": "ctrl+w",
    "command": "-workbench.action.closeGroup",
    "when": "activeEditorGroupEmpty && multipleEditorGroups"
  }
]
