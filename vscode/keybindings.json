// Keybindings MAC
[
  // # BASIC EDITING

  // ## CURSOR
  // Move cursor up                         ctrl P
  {
    "key": "ctrl+p",
    "command": "cursorUp",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+p",
    "command": "showPrevParameterHint",
    "when": "editorTextFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "ctrl+p",
    "command": "selectPrevSuggestion",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  {
    "key": "ctrl+p",
    "command": "list.focusUp",
    "when": "listFocus"
  },
  {
    "key": "ctrl+p",
    "command": "workbench.action.quickOpenSelectPrevious",
    "when": "inQuickOpen"
  },
  // Move cursor down                       ctrl N
  {
    "key": "ctrl+n",
    "command": "cursorDown",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+n",
    "command": "showNextParameterHint",
    "when": "editorTextFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
  },
  {
    "key": "ctrl+n",
    "command": "selectNextSuggestion",
    "when": "editorTextFocus && suggestWidgetMultipleSuggestions && suggestWidgetVisible"
  },
  {
    "key": "ctrl+n",
    "command": "list.focusDown",
    "when": "listFocus"
  },
  {
    "key": "ctrl+n",
    "command": "workbench.action.quickOpenSelectNext",
    "when": "inQuickOpen"
  },
  // Move cursor left                       ctrl B
  {
    "key": "ctrl+b",
    "command": "cursorLeft",
    "when": "editorTextFocus"
  },
  // Move cursor right                      ctrl F
  {
    "key": "ctrl+f",
    "command": "cursorRight",
    "when": "editorTextFocus"
  },
  // Move cursor page up                    ctrl K
  {
    "key": "ctrl+k",
    "command": "cursorPageUp",
    "when": "editorTextFocus"
  },
  // Move cursor page down                  ctrl J
  {
    "key": "ctrl+j",
    "command": "cursorPageDown",
    "when": "editorTextFocus"
  },
  // Move cursor to start of word           ctrl H
  {
    "key": "alt+left",
    "command": "cursorWordStartLeft",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+h",
    "command": "cursorWordStartLeft",
    "when": "editorTextFocus"
  },
  // Move cursor to end of word             ctrl L
  {
    "key": "alt+right",
    "command": "cursorWordEndRight",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+l",
    "command": "cursorWordEndRight",
    "when": "editorTextFocus"
  },
  // Move cursor to start of line           ctrl A
  {
    "key": "ctrl+a",
    "command": "cursorHome",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+left",
    "command": "cursorHome",
    "when": "editorTextFocus"
  },
  // Move cursor to end of line             ctrl E
  {
    "key": "ctrl+e",
    "command": "cursorEnd",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+right",
    "command": "cursorEnd",
    "when": "editorTextFocus"
  },
  // Move cursor to top of file             cmd up
  {
    "key": "cmd+up",
    "command": "cursorTop",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+up",
    "command": "workbench.action.terminal.scrollUp",
    "when": "terminalFocus"
  },
  // + Move cursor to bottom of file          cmd down
  {
    "key": "cmd+down",
    "command": "cursorBottom",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+down",
    "command": "workbench.action.terminal.scrollDown",
    "when": "terminalFocus"
  },


  // SCROLL
  // Scroll line up                         ctrl cmd K
  {
    "key": "ctrl+cmd+k",
    "command": "scrollLineUp",
    "when": "editorTextFocus"
  },
  // Scroll line down                       ctrl cmd J
  {
    "key": "ctrl+cmd+j",
    "command": "scrollLineDown",
    "when": "editorTextFocus"
  },


  // SELECT
  // Select up                              shift up | ctrl shift P
  {
    "key": "shift+up",
    "command": "cursorUpSelect",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+p",
    "command": "cursorUpSelect",
    "when": "editorTextFocus"
  },
  // Select down                            shift down | ctrl shift N
  {
    "key": "shift+down",
    "command": "cursorDownSelect",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+n",
    "command": "cursorDownSelect",
    "when": "editorTextFocus"
  },
  // Select previous character              shift left | ctrl shift B
  {
    "key": "shift+left",
    "command": "cursorLeftSelect",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+b",
    "command": "cursorLeftSelect",
    "when": "editorTextFocus"
  },
  // Select next character                  shift right | ctrl shift F
  {
    "key": "ctrl+shift+f",
    "command": "cursorRightSelect",
    "when": "editorTextFocus"
  },
  // Select page up                         ctrl shift K
  {
    "key": "ctrl+shift+k",
    "command": "cursorPageUpSelect",
    "when": "editorTextFocus"
  },
  // Select page down                       ctrl shift J
  {
    "key": "ctrl+shift+j",
    "command": "cursorPageDownSelect",
    "when": "editorTextFocus"
  },
  // Select to start of word                shift alt left | ctrl shift H
  {
    "key": "shift+alt+left",
    "command": "cursorWordStartLeftSelect",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+h",
    "command": "cursorWordStartLeftSelect",
    "when": "editorTextFocus"
  },
  // Select to end of word                  shift alt right | ctrl shift L
  {
    "key": "shift+alt+right",
    "command": "cursorWordEndRightSelect",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+l",
    "command": "cursorWordEndRightSelect",
    "when": "editorTextFocus"
  },
  // Select to start of line                shift cmd left | ctrl shift A
  {
    "key": "shift+cmd+left",
    "command": "cursorHomeSelect",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+a",
    "command": "cursorHomeSelect",
    "when": "editorTextFocus"
  },
  // Select to end of line                  shift cmd right | ctrl shift E
  {
    "key": "shift+cmd+right",
    "command": "cursorEndSelect",
    "when": "editorTextFocus"
  },
  {
    "key": "ctrl+shift+e",
    "command": "cursorEndSelect",
    "when": "editorTextFocus"
  },
  // Select to top of file                  shift cmd up
  {
    "key": "shift+cmd+up",
    "command": "cursorTopSelect",
    "when": "editorTextFocus"
  },
  // Select to bottom of file               shift cmd down
  {
    "key": "shift+cmd+down",
    "command": "cursorBottomSelect",
    "when": "editorTextFocus"
  },
  // Select all lines                       cmd A
  {
    "key": "cmd+a",
    "command": "editor.action.selectAll"
  },
  {
    "key": "cmd+a",
    "command": "workbench.action.terminal.selectAll",
    "when": "terminalFocus"
  },
  // Select line                            cmd I
  {
    "key": "cmd+i",
    "command": "expandLineSelection",
    "when": "editorTextFocus"
  },
  // Select word                            cmd D
  {
    "key": "cmd+d",
    "command": "editor.action.addSelectionToNextFindMatch",
    "when": "editorFocus"
  },
  // Select all occurrences of word         shift cmd D
  {
    "key": "shift+cmd+D",
    "command": "editor.action.changeAll",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Select all occurrences of selection    shift cmd L
  {
    "key": "shift+cmd+l",
    "command": "editor.action.selectHighlights",
    "when": "editorFocus"
  },


  // ## DELETE
  // Delete line                            shift cmd K
  {
    "key": "shift+cmd+k",
    "command": "editor.action.deleteLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Delete to start of word                ctrl backspace
  {
    "key": "ctrl+backspace",
    "command": "deleteWordLeft",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+backspace",
    "command": "workbench.action.terminal.deleteWordLeft",
    "when": "terminalFocus"
  },
  // Delete to end of word                  ctrl delete
  {
    "key": "ctrl+delete",
    "command": "deleteWordRight",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "ctrl+delete",
    "command": "workbench.action.terminal.deleteWordRight",
    "when": "terminalFocus"
  },
  // Delete to start of line                cmd backspace
  {
    "key": "cmd+backspace",
    "command": "deleteAllLeft",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Delete to end of line                  cmd delete
  {
    "key": "cmd+delete",
    "command": "deleteAllRight",
    "when": "editorTextFocus && !editorReadonly"
  },


  // ## Line editing
  // Insert line up                         shift cmd enter
  {
    "key": "shift+cmd+enter",
    "command": "editor.action.insertLineBefore",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Insert line down                       cmd enter
  {
    "key": "cmd+enter",
    "command": "editor.action.insertLineAfter",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Move line up                           ctrl cmd P
  {
    "key": "ctrl+cmd+p",
    "command": "editor.action.moveLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
    // Move line down                         ctrl cmd N
  {
    "key": "ctrl+cmd+n",
    "command": "editor.action.moveLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Join lines                             cmd J
  {
    "key": "cmd+j",
    "command": "editor.action.joinLines",
    "when": "editorTextFocus && !editorReadonly"
  },


  // ## COPY
  // Cut selection                          cmd X
  {
    "key": "cmd+x",
    "command": "editor.action.clipboardCutAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+x",
    "command": "editor.action.clipboardCopyAction",
    "when": "editorTextFocus && editorReadonly"
  },
  // Copy selection                         cmd C
  {
    "key": "cmd+c",
    "command": "editor.action.clipboardCopyAction",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+c",
    "command": "keybindings.editor.copyKeybindingEntry",
    "when": "inKeybindings && keybindingFocus"
  },
  {
    "key": "cmd+c",
    "command": "workbench.action.terminal.copySelection",
    "when": "terminalFocus && terminalTextSelected"
  },
  {
    "key": "cmd+c",
    "command": "problems.action.copy",
    "when": "problemFocus"
  },
  {
    "key": "cmd+c",
    "command": "filesExplorer.copy",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  // Copy line up                           shift cmd P
  {
    "key": "shift+cmd+p",
    "command": "editor.action.copyLinesUpAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Copy line down                         shift cmd N
  {
    "key": "shift+cmd+n",
    "command": "editor.action.copyLinesDownAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Paste                                  cmd V
  {
    "key": "cmd+v",
    "command": "editor.action.clipboardPasteAction",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "cmd+v",
    "command": "filesExplorer.paste",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },


  // ## MULTIPLE CURSORS
  // Insert cursor up                       ctrl cmd up
  {
    "key": "ctrl+cmd+up",
    "command": "editor.action.insertCursorAbove",
    "when": "editorTextFocus"
  },
  // Insert cursor down                     ctrl cmd down
  {
    "key": "ctrl+cmd+down",
    "command": "editor.action.insertCursorBelow",
    "when": "editorTextFocus"
  },
  // Insert cursor end of lines selected    shift cmd I
  {
    "key": "shift+cmd+i",
    "command": "editor.action.insertCursorAtEndOfEachLineSelected",
    "when": "editorTextFocus"
  },
  // - Column select up                       shift ctrl cmd up
  {
    "key": "ctrl+shift+cmd+up",
    "command": "cursorColumnSelectUp",
    "when": "editorTextFocus"
  },
  // - Column select down                     shift ctrl cmd down
  {
    "key": "ctrl+shift+cmd+down",
    "command": "cursorColumnSelectDown",
    "when": "editorTextFocus"
  },
  // - Column select left                     shift ctrl cmd left
  {
    "key": "ctrl+shift+cmd+left",
    "command": "cursorColumnSelectLeft",
    "when": "editorTextFocus"
  },
  // - Column select right                    shift ctrl cmd right
  {
    "key": "ctrl+shift+cmd+right",
    "command": "cursorColumnSelectRight",
    "when": "editorTextFocus"
  },


  // ## INDENTATION
  // Indent line                            cmd ]
  {
    "key": "cmd+]",
    "command": "editor.action.indentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Outdent line                           cmd [
  {
    "key": "cmd+[",
    "command": "editor.action.outdentLines",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Reindent lines                         cmd L R
  {
    "key": "cmd+l r",
    "command": "editor.action.reindentlines",
    "when": "editorTextFocus"
  },


  // ## FOLDING
  // Fold                                   cmd L [
  {
    "key": "cmd+l [",
    "command": "editor.fold",
    "when": "editorTextFocus"
  },
  // Fold all                               cmd L cmd [
  {
    "key": "cmd+l cmd+[",
    "command": "editor.foldAll",
    "when": "editorTextFocus"
  },
  // Fold all subregions                    cmd L shift cmd [
  {
    "key": "cmd+l shift+cmd+[",
    "command": "editor.foldRecursively",
    "when": "editorTextFocus"
  },
  // Unfold                                 cmd L ]
  {
    "key": "cmd+l ]",
    "command": "editor.unfold",
    "when": "editorTextFocus"
  },
  // Unfold all                             cmd L cmd ]
  {
    "key": "cmd+l cmd+]",
    "command": "editor.unfoldAll",
    "when": "editorTextFocus"
  },
  // Unfold all subregions                  cmd L shift cmd ]
  {
    "key": "cmd+l shift+cmd+]",
    "command": "editor.unfoldRecursively",
    "when": "editorTextFocus"
  },
  // Fold level #                           cmd L #
  {
    "key": "cmd+l 1",
    "command": "editor.foldLevel1",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+l 2",
    "command": "editor.foldLevel2",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+l 3",
    "command": "editor.foldLevel3",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+l 4",
    "command": "editor.foldLevel4",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+l 5",
    "command": "editor.foldLevel5",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+l 6",
    "command": "editor.foldLevel6",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+l 7",
    "command": "editor.foldLevel7",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+l 8",
    "command": "editor.foldLevel8",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+l 9",
    "command": "editor.foldLevel9",
    "when": "editorTextFocus"
  },


  // ## OTHERS
  // Comment line toggle                    cmd /
  {
    "key": "cmd+/",
    "command": "editor.action.commentLine",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Comment block toggle                   ctrl shift /
  {
    "key": "ctrl+shift+/",
    "command": "editor.action.blockComment",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Undo                                   cmd Z
  {
    "key": "cmd+z",
    "command": "undo",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Redo                                   cmd Y
  {
    "key": "cmd+y",
    "command": "redo",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Uppercase                              cmd K =
  {
    "key": "cmd+k =",
    "command": "editor.action.transformToUppercase",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Lowercase                              cmd K -
  {
    "key": "cmd+k -",
    "command": "editor.action.transformToLowercase",
    "when": "editorTextFocus && !editorReadonly"
  },


  // # SEARCH
  // Find                                   cmd F
  {
    "key": "cmd+f",
    "command": "actions.find"
  },
  {
    "key": "cmd+f",
    "command": "editor.action.extensioneditor.hidefind",
    "when": "extensionEditorWebviewFocus"
  },
  {
    "key": "cmd+f",
    "command": "editor.action.extensioneditor.showfind",
    "when": "extensionEditorWebviewFocus"
  },
  {
    "key": "cmd+f",
    "command": "editor.action.webvieweditor.showFind",
    "when": "webviewEditorFocus"
  },
  {
    "key": "cmd+f",
    "command": "settings.action.search",
    "when": "inSettingsEditor"
  },
  {
    "key": "cmd+f",
    "command": "keybindings.editor.searchKeybindings",
    "when": "inKeybindings && keybindingFocus"
  },
  {
    "key": "cmd+f",
    "command": "workbench.action.terminal.focusFindWidget",
    "when": "terminalFocus"
  },
  // Find in files                          shift cmd F
  {
    "key": "shift+cmd+f",
    "command": "workbench.action.findInFiles",
    "when": "!searchInputBoxFocus"
  },
  // Find next                              cmd H
  {
    "key": "cmd+h",
    "command": "editor.action.nextMatchFindAction",
    "when": "editorFocus"
  },
  // Find previous                          shift cmd H
  {
    "key": "shift+cmd+h",
    "command": "editor.action.previousMatchFindAction",
    "when": "editorFocus"
  },
  // Replace                                cmd R
  {
    "key": "cmd+r",
    "command": "editor.action.startFindReplaceAction",
    "when": "editorFocus"
  },
  // Replace in files                       shift cmd R
  {
    "key": "shift+cmd+r",
    "command": "workbench.action.replaceInFiles"
  },
  // Replace one                            ctrl R
  {
    "key": "ctrl+r",
    "command": "editor.action.replaceOne",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "key": "ctrl+r",
    "command": "search.action.replace",
    "when": "matchFocus && replaceActive && searchViewletVisible"
  },
  // Replace all                            ctrl shift R
  {
    "key": "ctrl+shift+r",
    "command": "editor.action.replaceAll",
    "when": "editorFocus && findWidgetVisible"
  },
  {
    "key": "ctrl+shift+r",
    "command": "search.action.replaceAll",
    "when": "replaceActive && searchViewletVisible && !findWidgetVisible"
  },


  // # NAVIGATION
  // Show all commands                      cmd P
  {
    "key": "cmd+p",
    "command": "workbench.action.showCommands"
  },
  // Show all opened editors                cmd G E
  {
    "key": "cmd+g e",
    "command": "workbench.action.showAllEditors"
  },
  {
    "key": "cmd+g cmd+e",
    "command": "workbench.action.showAllEditors"
  },
  // Go to file                             cmd G cmd G
  {
    "key": "cmd+g g",
    "command": "workbench.action.quickOpen"
  },
  {
    "key": "cmd+g cmd+g",
    "command": "workbench.action.quickOpen"
  },
  // Go to line                             cmd G L
  {
    "key": "cmd+g l",
    "command": "workbench.action.gotoLine"
  },
  {
    "key": "cmd+g cmd+l",
    "command": "workbench.action.gotoLine"
  },
  // Go to symbol                           cmd G F
  {
    "key": "cmd+g f",
    "command": "workbench.action.gotoSymbol"
  },
  {
    "key": "cmd+g cmd+f",
    "command": "workbench.action.gotoSymbol"
  },
  // Go to symbol in workspace              cmd G W
  {
    "key": "cmd+g w",
    "command": "workbench.action.showAllSymbols"
  },
  {
    "key": "cmd+g cmd+w",
    "command": "workbench.action.showAllSymbols"
  },
  // Go to definition                       cmd G D
  {
    "key": "cmd+g d",
    "command": "editor.action.goToDeclaration",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  // Open definition to the side            cmd G cmd D
  {
    "key": "cmd+g cmd+d",
    "command": "editor.action.openDeclarationToTheSide",
    "when": "editorHasDefinitionProvider && editorTextFocus && !isInEmbeddedEditor"
  },
  // Peek definition                        cmd G P
  {
    "key": "cmd+g p",
    "command": "editor.action.previewDeclaration",
    "when": "editorHasDefinitionProvider && editorTextFocus && !inReferenceSearchEditor && !isInEmbeddedEditor"
  },
  // Show hover                             cmd G H
  {
    "key": "cmd+g h",
    "command": "editor.action.showHover",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+g h",
    "command": "editor.debug.action.showDebugHover",
    "when": "editorTextFocus && inDebugMode"
  },
  // Go to matching bracket                 cmd G B
  {
    "key": "shift+cmd+\\",
    "command": "editor.action.jumpToBracket",
    "when": "editorTextFocus"
  },
  // Go back                                ctrl [
  {
    "key": "ctrl+[",
    "command": "workbench.action.navigateBack",
    "when": "editorFocus"
  },
  // Go forward                             ctrl ]
  {
    "key": "ctrl+]",
    "command": "workbench.action.navigateForward",
    "when": "editorFocus"
  },


  // # EDITOR
  // New file                               cmd N
  {
    "key": "cmd+n",
    "command": "workbench.action.files.newUntitledFile",
    "when": "!filesExplorerFocus"
  },
  // Save                                   cmd S
  {
    "key": "cmd+s",
    "command": "workbench.action.files.save"
  },
  // Save as                                cmd shift S
  {
    "key": "shift+cmd+s",
    "command": "workbench.action.files.saveAs"
  },
  // Save all                               cmd E cmd A
  {
    "key": "ctrl+shift+cmd+s",
    "command": "workbench.action.files.saveAll"
  },
  // Close editor                           cmd W
  {
    "key": "cmd+w",
    "command": "workbench.action.closeActiveEditor"
  },
  // Close other editors                    ctrl shift cmd w
  {
    "key": "ctrl+shift+cmd+w",
    "command": "workbench.action.closeOtherEditors"
  },
  // Close window                           shift cmd W
  {
    "key": "cmd+w",
    "command": "workbench.action.closeWindow",
    "when": "!editorIsOpen"
  },
  {
    "key": "shift+cmd+w",
    "command": "workbench.action.closeWindow"
  },
  // Close group                            cmd E cmd W
  {
    "key": "cmd+e cmd+w",
    "command": "workbench.action.closeEditorsInGroup"
  },
  // Close other groups                     cmd E W
  {
    "key": "cmd+e w",
    "command": "workbench.action.closeEditorsInOtherGroups"
  },
  // Close all                              cmd E cmd W
  {
    "key": "cmd+e shift+cmd+w",
    "command": "workbench.action.closeAllEditors"
  },
  // Reopen closed editor                   cmd E R | shift cmd T
  {
    "key": "cmd+e r",
    "command": "workbench.action.reopenClosedEditor"
  },
  {
    "key": "shift+cmd+t",
    "command": "workbench.action.reopenClosedEditor"
  },
  // Previous editor                        shif cmd [
  {
    "key": "shift+cmd+[",
    "command": "workbench.action.previousEditorInGroup"
  },
  // Next editor                            shif cmd ]
  {
    "key": "shift+cmd+]",
    "command": "workbench.action.nextEditorInGroup"
  },
  // Focus # editor                         ctrl #
  {
    "key": "ctrl+1",
    "command": "workbench.action.openEditorAtIndex1"
  },
  {
    "key": "ctrl+2",
    "command": "workbench.action.openEditorAtIndex2"
  },
  {
    "key": "ctrl+3",
    "command": "workbench.action.openEditorAtIndex3"
  },
  {
    "key": "ctrl+4",
    "command": "workbench.action.openEditorAtIndex4"
  },
  {
    "key": "ctrl+5",
    "command": "workbench.action.openEditorAtIndex5"
  },
  {
    "key": "ctrl+6",
    "command": "workbench.action.openEditorAtIndex6"
  },
  {
    "key": "ctrl+7",
    "command": "workbench.action.openEditorAtIndex7"
  },
  {
    "key": "ctrl+8",
    "command": "workbench.action.openEditorAtIndex8"
  },
  {
    "key": "ctrl+9",
    "command": "workbench.action.openEditorAtIndex9"
  },
  // Move editor left                       ctrl cmd [
  {
    "key": "ctrl+cmd+[",
    "command": "workbench.action.moveEditorLeftInGroup"
  },
  // Move editor right                      ctrl cmd ]
  {
    "key": "ctrl+cmd+]",
    "command": "workbench.action.moveEditorRightInGroup"
  },
  // Move editor into previous group        cmd E left
  {
    "key": "cmd+E left",
    "command": "workbench.action.moveEditorToPreviousGroup"
  },
  // Move editor into next group            cmd E right | cmd E cmd /
  {
    "key": "cmd+E right",
    "command": "workbench.action.moveEditorToNextGroup"
  },
  {
    "key": "cmd+E cmd+/",
    "command": "workbench.action.moveEditorToNextGroup"
  },
  // Move editor group left                 cmd E cmd left
  {
    "key": "cmd+e cmd+left",
    "command": "workbench.action.moveActiveEditorGroupLeft"
  },
  //Move editor group right                cmd E cmd right
  {
    "key": "cmd+e cmd+right",
    "command": "workbench.action.moveActiveEditorGroupRight"
  },
  // Join editors groups                    cmd E J | cmd E cmd J
  {
    "key": "cmd+e j",
    "command": "workbench.action.joinTwoGroups"
  },
  {
    "key": "cmd+e cmd+j",
    "command": "workbench.action.joinTwoGroups"
  },
  // Cycle editor groups                    cmd shift E | cmd E cmd E
  {
    "key": "cmd+shift+e",
    "command": "workbench.action.navigateEditorGroups"
  },
  {
    "key": "cmd+e cmd+e",
    "command": "workbench.action.navigateEditorGroups",
    "when": "editorFocus"
  },
  {
    "key": "cmd+e cmd+e",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "!editorFocus"
  },
  // Focus # editor group                   cmd #
  {
    "key": "cmd+0",
    "command": "workbench.action.focusSideBar"
  },
  {
    "key": "cmd+1",
    "command": "workbench.action.focusFirstEditorGroup"
  },
  {
    "key": "cmd+2",
    "command": "workbench.action.focusSecondEditorGroup"
  },
  {
    "key": "cmd+3",
    "command": "workbench.action.focusThirdEditorGroup"
  },
  // Split editor                           cmd E /
  {
    "key": "cmd+e /",
    "command": "workbench.action.splitEditor"
  },
  // Toggle editor group horizontal         cmd E -
  {
    "key": "cmd+e -",
    "command": "workbench.action.toggleEditorGroupLayout"
  },
  // Maximize editor group                  cmd E = | cmd E cmd =
  {
    "key": "cmd+e m",
    "command": "workbench.action.maximizeEditor"
  },
  // Even editor groups                     cmd E cmd =
  {
    "key": "cmd+e =",
    "command": "workbench.action.evenEditorWidths"
  },
  // Open next                              ctrl tab
  {
    "key": "ctrl+tab",
    "command": "workbench.action.openNextRecentlyUsedEditorInGroup"
  },
  {
    "key": "ctrl+tab",
    "command": "workbench.action.quickOpenNavigateNextInEditorPicker",
    "when": "inEditorsPicker && inQuickOpen"
  },
  // Open previous                          shift ctrl tab
  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.openPreviousRecentlyUsedEditorInGroup"
  },
  {
    "key": "ctrl+shift+tab",
    "command": "workbench.action.quickOpenNavigatePreviousInEditorPicker",
    "when": "inEditorsPicker && inQuickOpen"
  },


  // # DISPLAY
  // Sidebar toggle                         cmd M /
  {
    "key": "cmd+m /",
    "command": "workbench.action.toggleSidebarVisibility"
  },
  // Sidebar focus                          cmd M cmd+/
  {
    "key": "cmd+m cmd+/",
    "command": "workbench.action.focusSideBar"
  },
  {
    "key": "cmd+m cmd+/",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "!editorFocus"
  },
  // Focus on open editors                  cmd M E
  {
    "key": "cmd+m e",
    "command": "workbench.files.action.focusOpenEditorsView"
  },
  // Focus on files Explorer                cmd M F
  {
    "key": "cmd+m f",
    "command": "workbench.files.action.focusFilesExplorer"
  },
  // Show search                            cmd M S
  {
    "key": "cmd+m s",
    "command": "search.action.focusActiveEditor",
    "when": "searchInputBoxFocus && searchViewletVisible"
  },
  {
    "key": "cmd+m s",
    "command": "workbench.action.findInFiles",
    "when": "!searchInputBoxFocus"
  },
  {
    "key": "cmd+m s",
    "command": "workbench.view.search",
    "when": "!searchViewletVisible"
  },
  // Show search and replace                cmd M R
  {
    "key": "cmd+m r",
    "command": "workbench.action.replaceInFiles"
  },
  {
    "key": "cmd+m r",
    "command": "search.action.focusActiveEditor",
    "when": "replaceInputBoxFocus && searchViewletVisible"
  },
  // Show source control                    cmd M G
  {
    "key": "cmd+m g",
    "command": "workbench.view.scm"
  },
  // Show debug                             cmd M B
  {
    "key": "cmd+m b",
    "command": "workbench.view.debug"
  },
  // Show extensions                        cmd M X
  {
    "key": "cmd+m x",
    "command": "workbench.view.extensions"
  },
  // Panel toggle                           cmd M -
  {
    "key": "cmd+m -",
    "command": "workbench.action.togglePanel"
  },
  // Panel maximize                         cmd M =
  {
    "key": "cmd+m =",
    "command": "workbench.action.toggleMaximizedPanel"
  },
  // Show problems                          cmd M P
  {
    "key": "cmd+m p",
    "command": "workbench.actions.view.problems"
  },
  // Show output                            cmd M O
  {
    "key": "cmd+m o",
    "command": "workbench.action.output.toggleOutput"
  },
  // Show debug console                     cmd M cmd B
  {
    "key": "cmd+m c",
    "command": "workbench.debug.action.toggleRepl"
  },
  // Toggle integrated terminal             cmd M T
  {
    "key": "cmd+m t",
    "command": "workbench.action.terminal.toggleTerminal"
  },
  // Focus integrated terminal              cmd M cmd T
  {
    "key": "cmd+m cmd+t",
    "command": "workbench.action.terminal.focus"
  },
  {
    "key": "cmd+m cmd+t",
    "command": "workbench.action.focusActiveEditorGroup",
    "when": "terminalFocus"
  },
  // Toggle zen mode                        cmd M Z
  {
    "key": "cmd+m z",
    "command": "workbench.action.toggleZenMode"
  },
  // Toggle full screen                     cmd M cmd F
  {
    "key": "cmd+m cmd+f",
    "command": "workbench.action.toggleFullScreen"
  },
  // Markdown preview                       cmd M M
  {
    "key": "cmd+m m",
    "command": "markdown.showPreview",
    "when": "editorLangId == 'markdown'"
  },
  // Markdown preview to side               cmd M cmd M
  {
    "key": "cmd+m cmd+m",
    "command": "markdown.showPreviewToSide",
    "when": "editorLangId == 'markdown'"
  },
  // Zoom in                                cmd =
  {
    "key": "cmd+=",
    "command": "workbench.action.zoomIn"
  },
  // Zoom out                               cmd -
  {
    "key": "cmd+-",
    "command": "workbench.action.zoomOut"
  },
  // Reset zoom                             shift cmd = | shift cmd -
  {
    "key": "shift+cmd+=",
    "command": "workbench.action.zoomReset"
  },
  {
    "key": "shift+cmd+-",
    "command": "workbench.action.zoomReset"
  },


  // # PREFERENCES
  // Open preferences                       cmd ,
  {
    "key": "cmd+,",
    "command": "workbench.action.openGlobalSettings"
  },
  // Keyboard shortcuts                     cmd K cmd S
  {
    "key": "cmd+k cmd+s",
    "command": "workbench.action.openGlobalKeybindings"
  },
  {
    "command": "keybindings.editor.defineKeybinding",
    "key": "cmd+k cmd+k",
    "when": "inKeybindings && keybindingFocus"
  },
  {
    "command": "editor.action.defineKeybinding",
    "key": "cmd+k cmd+k",
    "when": "editorTextFocus && !editorReadonly && editorLangId == 'json'"
  },
  // User snippets                          cmd K cmd U
  {
    "key": "cmd+k cmd+u",
    "command": "workbench.action.openSnippets"
  },
  // Insert snippet                         cmd K S
  {
    "key": "cmd+k s",
    "command": "editor.action.insertSnippet"
  },
  // Color theme                            cmd K cmd T
  {
    "key": "cmd+k cmd+t",
    "command": "workbench.action.selectTheme"
  },
  // Change language                        cmd K cmd L
  {
    "key": "cmd+k cmd+l",
    "command": "workbench.action.editor.changeLanguageMode"
  },
  // Format selection                       cmd K F
  {
    "key": "cmd+k f",
    "command": "editor.action.formatSelection",
    "when": "editorHasDocumentSelectionFormattingProvider && editorHasSelection && editorTextFocus && !editorReadonly"
  },
  // Format document                        cmd K cmd F
  {
    "key": "cmd+k cmd+f",
    "command": "editor.action.formatDocument",
    "when": "editorHasDocumentFormattingProvider && editorTextFocus && !editorReadonly"
  },
  // Word wrap toggle                       cmd K W
  {
    "key": "cmd+k w",
    "command": "editor.action.toggleWordWrap"
  },
  // Copy path of active file               cmd K P
  {
    "key": "cmd+k p",
    "command": "workbench.action.files.copyPathOfActiveFile"
  },
  // Toggle minimap                         cmd K M
  {
    "key": "cmd+k m",
    "command": "editor.action.toggleMinimap"
  },
  // TM Scopes                              ^cmd I
  {
    "key": "ctrl+cmd+i",
    "command": "editor.action.inspectTMScopes",
    "when": "editorTextFocus && !editorReadonly"
  },
  // Developer tools                        ctrl shift cmd I
  {
    "key": "ctrl+shift+cmd+i",
    "command": "workbench.action.toggleDevTools"
  },


  // # DEBUG
  // Breakpoint toggle                      cmd B cmd B
  {
    "key": "cmd+b cmd+b",
    "command": "editor.debug.action.toggleBreakpoint",
    "when": "editorTextFocus"
  },
  // Start                                  cmd B S
  {
    "key": "cmd+b s",
    "command": "workbench.action.debug.start",
    "when": "!inDebugMode"
  },
  // Start (without debugging)              cmd B cmd S
  {
    "key": "cmd+b cmd+s",
    "command": "workbench.action.debug.run",
    "when": "!inDebugMode"
  },
  // Restart                                cmd B R
  {
    "key": "cmd+b r",
    "command": "workbench.action.debug.restart",
    "when": "inDebugMode"
  },
  // Continue                               cmd B C
  {
    "key": "cmd+b c",
    "command": "workbench.action.debug.continue",
    "when": "inDebugMode"
  },
  // Pause                                  cmd B P
  {
    "key": "cmd+b p",
    "command": "workbench.action.debug.pause",
    "when": "inDebugMode"
  },
  // Step into                              cmd B I
  {
    "key": "cmd+b i",
    "command": "workbench.action.debug.stepInto",
    "when": "inDebugMode"
  },
  // Step out                               cmd B O
  {
    "key": "cmd+b o",
    "command": "workbench.action.debug.stepOut",
    "when": "inDebugMode"
  },
  // Step over                              cmd B cmd O
  {
    "key": "cmd+b cmd+o",
    "command": "workbench.action.debug.stepOver",
    "when": "inDebugMode"
  },
  // Stop                                   cmd B T
  {
    "key": "cmd+b t",
    "command": "workbench.action.debug.stop",
    "when": "inDebugMode"
  },
  // Show hover                             cmd B H
  {
    "key": "cmd+b h",
    "command": "editor.debug.action.showDebugHover",
    "when": "editorTextFocus && inDebugMode"
  },


  // # TASKS
  // Run task                               cmd T cmd T
  {
    "key": "cmd+t cmd+t",
    "command": "workbench.action.tasks.runTask"
  },
  // Run build task                         cmd T B
  {
    "key": "cmd+t b",
    "command": "workbench.action.tasks.build"
  },
  // Run test task                          cmd T T
  {
    "key": "cmd+t t",
    "command": "workbench.action.tasks.test"
  },


  // # EXPLORER
  // New file                               cmd N
  {
    "key": "cmd+n",
    "command": "explorer.newFile",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  // New folder                             shift cmd N
  {
    "key": "shift+cmd+n",
    "command": "explorer.newFolder",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  // Rename file                            cmd R
  {
    "key": "cmd+r",
    "command": "renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  // Open file                              cmd O | enter
  {
    "key": "enter",
    "command": "list.select",
    "when": "listFocus"
  },
  {
    "key": "ctrl+l",
    "command": "list.select",
    "when": "listFocus"
  },
  // pen file to side                      ctrl cmd L | cmd enter
  {
    "key": "cmd+enter",
    "command": "explorer.openToSide",
    "when": "listFocus"
  },
  {
    "key": "ctrl+cmd+l",
    "command": "explorer.openToSide",
    "when": "listFocus"
  },
  // Collapse                               ctrl H
  {
    "key": "ctrl+h",
    "command": "list.collapse",
    "when": "listFocus"
  },
  // Collapse all                           ctrl cmd H
  {
    "key": "ctrl+cmd+h",
    "command": "workbench.files.action.collapseExplorerFolders",
    "when": "listFocus"
  },
  {
    "key": "ctrl+j",
    "command": "list.focusPageDown",
    "when": "listFocus"
  },
  {
    "key": "ctrl+k",
    "command": "list.focusPageUp",
    "when": "listFocus"
  },


  // # TERMINAL
  // New terminal                           cmd T N
  {
    "key": "cmd+t n",
    "command": "workbench.action.terminal.new"
  },
  // Focus previous terminal                shift cmd [
  {
    "key": "shift+cmd+[",
    "command": "workbench.action.terminal.focusPrevious",
    "when": "terminalFocus"
  },
  // Focus next terminal                    shift cmd ]
  {
    "key": "shift+cmd+]",
    "command": "workbench.action.terminal.focusNext",
    "when": "terminalFocus"
  },
  // Kill terminal                          cmd T W
  {
    "key": "cmd+t w",
    "command": "workbench.action.terminal.kill",
    "when": "terminalFocus"
  },
  // Rename terminal                        cmd T R
  {
    "key": "cmd+r",
    "command": "workbench.action.terminal.rename",
    "when": "terminalFocus"
  },
  // Clear                                  cmd K
  {
    "key": "cmd+k",
    "command": "workbench.action.terminal.clear",
    "when": "terminalFocus"
  },


  // # GIT
  // Open changes                           cmd G C
  {
    "key": "cmd+g c",
    "command": "git.openChange"
  },
  // Open file                              cmd G O
  {
    "key": "cmd+g o",
    "command": "git.openFile"
  },
  // Stash                                  cmd G S
  {
    "key": "cmd+g s",
    "command": "git.stash"
  },
  // Pop stash                              cmd G cmd S
  {
    "key": "cmd+g cmd+s",
    "command": "git.stashPop"
  },
  // Checkout to                            cmd G cmd C
  {
    "key": "cmd+g cmd+c",
    "command": "git.checkout"
  },
  // Discard changes                        cmd G backspace
  {
    "key": "cmd+g backspace",
    "command": "git.clean"
  },
  // Undo last commit                       cmd G cmd Z
  {
    "key": "cmd+g cmd+Z",
    "command": "git.undoCommit"
  },
  // Previous change                        ctrl shift cmd [
  {
    "key": "ctrl+shift+cmd+[",
    "command": "editor.action.dirtydiff.previous",
    "when": "editorTextFocus"
  },
  // Next change                            ctrl shift cmd ]
  {
    "key": "ctrl+shift+cmd+]",
    "command": "editor.action.dirtydiff.next",
    "when": "editorTextFocus"
  },


  // # Bookmarks
  // Bookmark toggle                        cmd L B
  {
    "key": "cmd+l b",
    "command": "bookmarks.toggle",
    "when": "editorTextFocus"
  },
  // Bookmark next                          cmd L N
  {
    "key": "cmd+l n",
    "command": "bookmarks.jumpToNext",
    "when": "editorTextFocus"
  },
  // Bookmark previous                      cmd L P
  {
    "key": "cmd+l p",
    "command": "bookmarks.jumpToPrevious",
    "when": "editorTextFocus"
  },
  // Bookmark list                          cmd L L | cmd L cmd L
  {
    "key": "cmd+l l",
    "command": "bookmarks.list",
    "when": "editorTextFocus"
  },
  {
    "key": "cmd+l cmd+l",
    "command": "bookmarks.list",
    "when": "editorTextFocus"
  },
  // Bookmark list all files                cmd L shift cmd L
  {
    "key": "cmd+l shift+cmd+l",
    "command": "bookmarks.listFromAllFiles",
    "when": "editorTextFocus"
  },
  // Bookmark clear                         cmd L backspace
  {
    "key": "cmd+l backspace",
    "command": "bookmarks.clear"
  },
  // Bookmark clear all files               cmd L cmd backspace
  {
    "key": "cmd+l cmd+backspace",
    "command": "bookmarks.clearFromAllFiles"
  },

  // REMOVED CONFLICTS
  {
    "key": "enter",
    "command": "-renameFile",
    "when": "explorerViewletVisible && filesExplorerFocus"
  },
  {
    "key": "cmd+k u",
    "command": "-workbench.action.closeUnmodifiedEditors"
  },
  {
    "key": "cmd+k f",
    "command": "-workbench.action.closeFolder"
  },
  {
    "key": "cmd+k m",
    "command": "-workbench.action.editor.changeLanguageMode"
  },
  {
    "key": "cmd+k cmd+w",
    "command": "-workbench.action.closeAllEditors"
  },
  {
    "key": "cmd+k w",
    "command": "-workbench.action.closeEditorsInGroup"
  },
  {
    "key": "cmd+k o",
    "command": "-workbench.action.files.showOpenedFileInNewWindow"
  },
  {
    "key": "ctrl+cmd+left",
    "command": "-workbench.action.moveEditorToPreviousGroup"
  },
  {
    "key": "ctrl+cmd+right",
    "command": "-workbench.action.moveEditorToNextGroup"
  },
  {
    "key": "alt+z",
    "command": "-editor.action.toggleWordWrap"
  },
  {
    "key": "alt+c",
    "command": "-gitlens.showQuickCommitFileDetails",
    "when": "editorTextFocus && gitlens:enabled"
  },
  {
    "key": "ctrl+d",
    "command": "-deleteRight",
    "when": "editorTextFocus && !editorReadonly"
  },
  {
    "key": "escape escape",
    "command": "-workbench.action.exitZenMode",
    "when": "inZenMode"
  }
]
